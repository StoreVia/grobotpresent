"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.https=void 0;const https_1=require("https"),HttpsError_1=require("../error/HttpsError");
/**
 * ## https
 * ### Https function to replace your good ol' node-fetch and axios.
 *
 * @param {string | httpsOptions} url `string` | [`httpsOptions`](https://simplyd.js.org/docs/misc/https#httpsoptions)
 * @param {httpsOptions} options [`httpsOptions`](https://simplyd.js.org/docs/misc/https#httpsoptions)
 * @returns {Promise<any>} `any`
 *
 * ---
 *
 * @link [`Documentation`](https://simplyd.js.org/docs/misc/https)
 * @example simplydjs.https("postman-echo.com/get") // An Echo endpoint
 */
function https(url,options={method:"GET",headers:{"Content-Type":"application/json"}}){return new Promise((resolve,reject)=>{let e,t;if(options||"string"==typeof url)"string"==typeof url&&(r=(url=url.replace("https://","").replace("http://","")).split("/"),e=r[0],r.shift(),t="/"+r.join("/"));
// Using node:https request function
else if((options=url).host&&url.endpoint)e=url.host.replace("https://","").replace("http://",""),t=url.endpoint;else{if(!url.url)throw new Error("Provide a Url (or) Host name & Endpoint to make a request");var r=url.url.split("/");e=r[0],r.shift(),t="/"+r.join("/")}r=(0,https_1.request)({hostname:e,path:t,method:options.method,headers:options.headers},async response=>{
// Handle any redirects
if(response.headers.location&&200!=response.statusCode)return resolve(await https(response.headers.location,{method:options.method,headers:options.headers,body:options.body}));
// Data stream
let e="";response.on("error",reject),response.on("data",chunk=>e+=chunk),response.on("end",async()=>{try{options.debug&&console.log(e),
// Resolve any object
resolve(JSON.parse(e))}catch(e){
// Some API sends html file as error. So this throws error if there is some
throw new HttpsError_1.HttpsError({error:e.stack})}})});
// Write body into the request if its other than GET method
options?.body&&r.write(JSON.stringify(options.body)),
// closes the request
r.end()})}exports.https=https;